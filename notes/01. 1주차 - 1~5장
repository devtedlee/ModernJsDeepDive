# 1장 프로그래밍

- 프로그래밍은 구문(syntax)과 의미(semantics)의 조합으로 표현된다.
- 노엄 촘스키: 언어의 의미는 문맥(semantics)에 있는 것이지 문법에 있는 것이 아니다.
- 프로그래밍은 컴퓨터와의 의사소통을 통해 요구사항을 충족하는 것이 목적이기 때문에 요구사항이 제대로 해결되는것이 제 1 전제조건이다.
- 프로그래밍 정의: 요구사항의 집합을 분석해서 적절한 자료구조와 함수의 집합으로 변환한 후, 그 흐름을 제어하는 것.

# 2장 자바스크립트란?

## 2.1 자바스크립트의 탄생

- 브랜던 아이크에 의해 1996년 3월 넷스케이프 브라우저에 탑재
- 첫 이름 모카(Mocha) -> 라이브스크립트(LiveScript) -> 자바스크립트(Javascript)

## 2.2 자바스크립트의 표준화

- 마소와의 갈등 끝에 2009년 ECMAScript로 표준화
- 2009년 출시된 ECMAScript5가 JQuery와 강하게 연관되어있다.
- ECMAScript 표 정리 - [W3C 참고](https://www.w3schools.com/js/js_versions.asp)
  - 다른 더 자세한 기능 명세 참고는 여기 [tc39 깃허브](https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md)

| Version | Year | Description|
| ------- | ---- ||
| 5       | 2009 | - 엄격 모드(use strict)<br>- JSON 지원: JSON.parse(), JSON.stringlify()<br>- getter, setter 등 access modifier<br>- array 함수: forEach(), map(), filter(), reduce(), every(), some(), indexOf(), lasIndexOf(), Array.isArray()<br>- string 함수: trim()<br>- string [] 연산자와 charAt()<br>- string 여러줄 허용, 역슬래쉬<br>- Date 함수: Date.now(), toISOString(), toJSON()<br>- Object 함수: Object.create(), Object.keys(), Object.seal(), Object.freeze(), Object.defineProperty() 등등<br>- bind()<br>- Object 나 Array 선언시 콤마 허용(기존 안됨)<br>- (왜 허용했냐 이해안됨) 예약어를 속성명으로 쓸수 있게함. new 등<br>- 모던 브라우저 전체 지원: 2013년 7월                                                                                                                     |
| 5.1     | 2011 | - 별 내용 없음|
| 6<br>   | 2015 | - let, const<br>- 화살표 함수<br>- ... 연산자<br>- for/of 문<br>- 자료구조: map, set<br>- class<br>- promise<br>- Symbol<br>- 매개변수 기본값 설정<br>- ...args 나머지 매개변수 (Function rest parameter)<br>- string 함수: String.includes(), String.startsWith(), String.endsWith()<br>- array 함수: Array.from(), keys(), find(), findIndex()<br>- Math 함수: trunc(), sign(), cbrt(), log2(), log10()<br>- Number 프로퍼티: EPSILON, MIN_SAFE_INTEGER, MAX_SAFE_INTEGER<br>- Number 함수: isInteger(), isSafeInteger()<br>- 글로벌 함수: isFinite(), isNaN()<br>- Object 함수: entries()<br>- Modules<br>- 모던 브라우저 전체 지원: 2017년 6월 (왜 2016버전 보다 늦지?)                                                                                                                  |
| 2016    | 2016 | - 배열에 includes() 추가<br>- 지수 연산자 `**` , 지수 할당 연산자 `**=`<br>- 모던 브라우저 전체 지원: 2017년 3월|
| 2017    | 2017 | - string 함수: padStart(), padEnd()<br>- Object 함수: Object.entries(), Object.values(), Object.getOwnPropertyDescriptors()<br>- async/await<br>- 후행 쉼표 전격 허용: array, object literals, function call, function parameter, import and export<br>- 모던 브라우저 전체 지원: 2017년 9월                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| 2018    | 2018 | - for await () {} 추가<br>- Promise 함수: finally()<br>- Object ... 프로퍼티<br>- 정규식 기능 4개 추가: `\p`(유니코드 속성 escape), `?<=`, `?<!`, s 플래그, `?<name>pattern` <br>- Web Worker API: 스레드 추가<br> - Shared Memory 추가: SharedArrayBuffer|
| 2019    | 2019 | - String 함수: trimStart(), trimEnd()<br>- Object 함수: Object.fromEntries()<br>- 옵셔널 catch 허용: catch 시 error 매개변수 없어도됨<br>- Array 함수: flat(), flatMap()<br>- Array sort() 함수 개정: Quick Sort -> Tim Sort 로 변경. 병합 정렬과 삽입 정렬 혼합 됨. 더 빠름. 기존에는 동일한 정렬 조건에도 때로 순서가 섞이던 문제가 있었음. 이제 원본 유지. [참고](https://jake-seo-dev.tistory.com/425)<br>- JSON.stringlify() 개정: UTF-8 코드 포인트(U+D800 ~ U+DFFF)에서 문자열 깨지던 문제 픽스<br>- 문자열 리터럴에 줄 구분 기호 및 단락 구분 기호(\u2028 및 \u2029) 허용: 기존에는 syntax error 발생<br>- toString() 개정: 함수 인스턴스를 toString() 했을 때 2019년 이전에는 브라우저마다 주석과 공백이 없는 등 다양한 변형 함수를 반환. 2019년부터는 함수가 작성된 그대로 반환됨. |
| 2020    | 2020 | - BigInt 도입: BigInt(n) or `10000000000000n;`<br>- string 함수: matchAll()<br>- null 병합 연산자 ??<br>- 옵셔널 체이닝 연산자 ?.<br>- 논리 AND 할당 연산자 &&=<br>- 논리 OR 할당 연산자 \|\|=<br>- null 병합 할당 연산자 ??=<br>- Promise 함수: allSettled() all()과 달리 전부 실행됨<br>- 동적 import : `import('bar.js').then(a => console.log)`                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| 2021    | 2021 | - Promise.any(): 하나라도 성공하면 에러 아님. 다 실패하면 에러<br>- string 함수: replaceAll() g 옵션 안쓰고 전체 바꾸기<br>- 숫자 구분 기호(numeric seperator): `1_000_000_000` 이거 됨|
| 2022    | 2022 | - Array 함수: at()<br>- String 함수: at()<br>- 정규식: `/d` 소괄호로 구분된 group의 index 속성(indices) 사용 가능<br>- Object.hasOwn(): 자식 속성의 키 일치여부만 확인. in은 부모까지 확인.<br>- error.cause: 에러 타입 보조 프로퍼티<br>- 모듈의 탑레벨 await 허용(async 없어도 됨)<br>- 클래스에 private, static 키워드 추가, 필드 선언 추가할때 this. 없어도 됨<br>- in 연산자에서 private 필드도 확인 가능                                                                                                                                                                                                                                                                                                                                                                               |
| 2023    | 2023 | - Array 함수 추가: findLast(), findLastIndex(), toReversed(), toSorted(), toSpliced(), with()<br>- 해시뱅 추가: `#!` 운영 체제에 node 프로그램을 사용하여 실행하도록 지시 가능|

- 조사 후기: 엘리스의 토끼굴 그 자체

## 2.3 자바스크립트 성장의 역사

- 랜더링이란 HTML, CSS, 자바스크립트로 작성된 문서를 해석해서 브라우저에 시각적으로 출력하는 것을 말한다.

### 2.3.1 Ajax

- 1999년 Ajax(Asynchronous javscript and xml)이 XMLHttpRequest로 등장
- 대표작: 2005년 구글 맵스

### 2.3.2 jQuery

- 2006년 등장
- 쉬워진 DOM 제어가 특징.

### 2.3.3 V8 자바스크립트 엔진

- 2008년 등장. 구글
- 단순 인터프리터를 넘어 일부 컴파일을 하여 속도를 갖춘 런타임 엔진

### 2.3.4 Node.js

- 2009년 라이언 달
- V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경
- 빌트인 API 제공: 모듈, 파일 시스템, HTTP 등 기능
- 비동기 I/O를 지원하며 단일 스레드 이벤트 루프 기반으로 동작
- CPU 사용률이 높은 어플리케이션에는 권장하지 않음
  - CPU를 많이 사용하는 작업이 메인 스레드를 장기간 차지하면 다른 작업들이 대기해야 함.
  - CPU 집약적인 작업은 메인 이벤트 루프를 차단할 수 있음
  - 비동기 I/O 모델이라 CPU 바운드 작업을 병렬로 처리하는 데 제한적
  - Node.js 애플리케이션을 스케일링하기 위해서는 프로세스를 여러 개 실행하는 클러스터링 방식을 사용해야 하는데 결국 CPU 성능은 그대로임

### 2.3.5 SPA 프레임워크

- CBD(Component Based Development) 방법론을 기반으로 하는 SPA가 대중화
- CBD란 컴포넌트 중심으로 시스템 구축하는 접근 방식
  - 특징: 모듈성, 재사용성, 독립성, 표준화
  - 장점: 유지보수 용이, 개발 시간 단축, 확장성, 품질 향상
  - 단점: 초기 설계 복잡성 높음, 종속성 관리 어려움

## 2.4 자바스크립트와 ECMAScript

- Javascript의 부분집합이 ECMAScript다.
- Javascript에는 ECMAScript + Client side Web API를 아우르는 개념.
- Client side Web API는 월드 와이드 웹 코소시엄에서 별도 사양으로 관리중

## 2.5 자바스크립트의 특징

- 기본 문법은 C, 자바와 유사, 셀프(Self)에서는 프로토타입 기반 상속, 스킴(Scheme)에서는 1급 함수의 개념 차용
- 어떤 일부 소스코드가 컴파일 되는지 알아볼 것
  - 코드가 반복적으로 실행되면 TurboFan 최적화 컴파일러에 의해 성능 향상을 당한다.
  - 최적화된 코드가 예상과 다르게 동작하면 디옵티마이징 수행해서 다시 바이트 코드로 롤백한다.(안전장치)
  - 주요 대상: 자주 실행되는 코드, 성능에 민감한 코드, 인라인 함수
- 자바스크립트는 명령형, 함수형, 프로토타입 기반 객체지향 프로그래밍을 지원하는 멀티 패러다임 프로그래밍 언어다.
  - 다만 클래스 기반 객체지향 언어보다 효율적인게 무엇인지 조사해보자
    - 유연성: 동적 프로토타입 변경, 코드 재사용
    - 메모리 사용: 메모리 공유(전역이니까) 되니까 사용량이 낮다
    - 코드 재사용성: 객체를 쉽게 확장하거나 수정해서 쓸 수 있음
    - 동적 객체 조작: 런타임에서 속성 추가하거나 제거 가능.

## 2.6 ES6 브라우저 지원 현황

- 최신 ES6 지원 현황을 알아보자 <https://kangax.github.io/compat-table/es6>

# 3장 자바스크립트 개발 환경과 실행 방법

## 3.1 자바스크립트 실행 환경

- 브라우저와 Node.js 모두 자바스크립트의 코어인 ECMAScript를 실행할 수 있지만 브라우저와 Node.js에서 ECMAScript 이외에 추가로 제공되는 기능은 호환되지 않는다.
- 각자의 고유한 기능 정리
  - 브라우저: DOM API, BOM API, Canvas & WebGL, Web APIs, CSS 조작 및 애니메이션, 이벤트 핸들링
  - Node.js: File System 모듈, HTTP/HTTPS 모듈, os모듈, Buffer 클래스, child_process 모듈(외부 프로세스 실행/관리), module 시스템(CJS), path 모듈, stream 모듈

## 3.2 웹 브라우저

### 3.2.1 개발자 도구

### 3.2.2 콘솔

- 콘솔 활용 꿀팁 정리
  - [22개 링크](https://dev.to/franciscomoretti/22-useful-console-methods-every-web-developer-should-know-57le)
  - [자주 쓰는 콘솔 예시 및 정리](https://dev.to/kelvinguchu/javascript-console-methods-a-deep-dive-jbf)

### 3.2.3 브라우저에서 자바스크립트 실행

### 3.2.4 디버깅

- 구글의 Tools for Web Developers: 콘솔사용
  - [브레이크 포인트 로그 포인트](https://developer.chrome.com/blog/devtools-tips-25?hl=en)
- Tools for Web Developers: Chrome DevTools 에서 자바스크립트 디버깅 시작하기
  - 공홈: <https://developer.chrome.com/docs/devtools?hl=ko>

## 3.3 Node.js

## 3.4 비주얼 스튜디오 코드

# 4장 변수

## 4.1 변수란 무엇인가? 왜 필요한가?

- 변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기위해 붙인 이름을 말한다.
- 변수 이름은 가독성을 높여주는데, 가독성을 높였을 때의 이점 정리해보자
  - 코드 이해 용이, 유지 보수 용이, 버그 감소, 효율적인 커뮤니케이션에 도움, 코드 자체로 문서가 됨
  - 네이밍 시 주의사항
    - 일관성을 유지하자
    - 축약어 사용은 최소화 하자
    - 문맥적 명확성이 있어야한다(ex 스코프에 따른 명명 방식 차이 등)

## 4.2 식별자

- 식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.
- 메모리 상에 존재하는 어떤 값을 식별할 수 있는 이름은 모두 식별자라고 부른다.

## 4.3 변수 선언

- 변수 선언이란 변수를 생성하는 것을 말한다.
- var 키워드의 단점 정리
  - 함수 레벨 스코핑으로 인한 스코프로 인해 변수 값 예측이 어려움
  - 선언 위치를 무시하고 자동 호이스팅 되어 혼란 스러움
  - 재선언이 가능하여 헷갈림
  - 전역 네임스페이스를 오염시켜서 충돌이 일어날 수 있음
- 키워드와 예약어(reserved words)의 차이
  - 키워드: 언어 구조를 정의하는데 사용
    - 예시: if, else, function, return, var, let, const, for, while
  - 예약어: 미래의 Javascript 확장을 위해 예약된 단어들
    - 예시: enum, await, implements, package, protected, static, interface

## 4.4 변수 선언의 실행 시점과 변수 호이스팅

- 변수 선언은 런타임이 아니라 그 이전 단계에서 먼저 실행된다.
- 런타임 이전에 소스코드 평가 때 실행됨.
- 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅이라고 함.

## 4.5 값의 할당

- 구문(statement)을 나누는 기준
  - 크게 두가지 방식
    - 완결성: if문 for 문 등 선언으로 완결된 구조
      - 변수 선언문
      - 조건문
      - 반복문
      - 함수 선언문
      - 클래스 선언문
      - 제어 전달문: return, break, continue
      - 블록문: 중괄호로 된 모든 것 { }
    - 종결자: 기본적으로 세미콜론을 종결자로 삼아 지정.
      - 자바스크립트는 자동 세미콜론 삽입 기능을 가지고 있어서 기록 안해도 됨
      - 자동 삽입 기준
        - 줄 끝
        - 괄호나 대괄호로 시작하는 줄
        - return, throw, break, continue
        - 파일의 끝
- 할당 연산자 = 를 사용하여 할당.
- 변수선언과 값의 할당을 두줄로 나누어 표현한 코드와 한줄로 표현한 코드의 동작은 정확하게 동일하다.

## 4.6 값의 재할당

- 이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것
- 엄밀히 말하면 자바스크립트는 변수에 처음 값 할당하는 것 자체가 재할당
- 값을 재할당 할 수 없는 것은 변수가 아니라 상수다.

## 4.7 식별자 네이밍 규칙

- 식별자는 특수 문자를 제외한 문자, 숫자, `_`, $ 를 포함할 수 있다.
- 단, 식별자는 특수문자를 제외한 문자 언더스코어, 달러기호로 시작해야 한다. 숫자로 시작은 허용되지 않는다.
- 예약어는 식별자로 사용할 수 없다.(근데 object 키로는 쓸수있다? 허용 이유 확인)
  - 하지만 object 속성명으로 쓸 수 있다.
  - 이유는 하위 버전 호환성
  - 객체 리터럴의 표현을 강화하기. 다양한 표현을 허용하기 위해, 그리고 JSON 등 데이터 표현에도 자유를 부여하기 위해서다.
- 카멜 케이스, 스네이크 케이스, 파스칼 케이스, 헝가리언 케이스의 차이와 기원, 용처 등 조사
  - 카멜 케이스
    - Javascript, Java, C#, PHP등에서 변수나 함수 이름
    - useName, useState
  - 스네이크 케이스
    - C언어에서 유래, Python과 같은 언어에서 변수명이나 함수명 지을 때 사용
    - user_name, calculate_total
  - 파스칼 케이스
    - 파스칼 프로그래밍 언어에서 유래. C#, Java, Javascript에서 클래스명 지을 때 주로 사용
    - PascalCase
  - 헝가리언 케이스
    - 마소 프로그래머 찰스 시몬 개발. 현대 프로그래밍에서는 잘 사용 안됨
    - 타입을 앞에 소문자로 명시. strUserName, bIsActive 등

# 5장 표현식과 문

- 이번장은 개념이해와 구분이 핵심

## 5.1 값

- 값은 식(표현식)이 평가되어 생선된 결과를 말한다.

## 5.2 리터럴

- 리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법(notation)을 말한다.

## 5.3 표현식

- 표현식은 값으로 평가될 수 있는 문(statement)이다. 즉 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.
- 표현식은 리터럴, 식별자, 연산자, 함수 호출 등의 조합으로 이뤄질 수 있다.
- 값으로 평가될 수 있는 문은 모두 표현식이다.

## 5.4 문

- 문과 표현식을 구별하고 해석할 수 있다면 자바스크립트 엔진의 입장에서 코드를 읽을 수 있고 실행 결과를 예측하는데 도움이 된다.
- 문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위다 .문은 명령문이라고 부르기도 한다.
- 토큰은 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.

## 5.5 세미콜론과 세미콜론 자동 삽입 기능

- 코드 블록은 언제나 문의 종료를 의미하는 자체 종결성을 갖는다.
- TC39(ECMASCript 기술위원회)는 세미콜론 사용을 권장한다.

## 5.6 표현식인 문과 표현식이 아닌 문

- 표현식인 문은 값으로 평가 될 수 있는 문 ex) `bar = 1 + 3;`
- 표현식이 아닌 문은 값으로 평가될 수 없는 문 ex) `var bar;`
- 가장 간단한 구분법: 표현식 째로 변수에 할당 가능 여부 확인
- 크롬 개발자 도구에서 표현식이 아닌 문을 실행하면 언제나 undifined를 출력하는데 이를 '완료 값'이라고 부른다. 다른 값과 다르게 할당과 참조 불가 (그냥 완료 되있다).
